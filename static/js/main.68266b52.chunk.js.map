{"version":3,"sources":["pomodoro/Control.js","utils/class-names/index.js","pomodoro/ProgressBar.js","pomodoro/Current.js","pomodoro/Pomodoro.js","utils/useInterval/index.js","App.js","index.js"],"names":["Control","classNameToBoolean","playPause","isTimerRunning","setIsTimerRunning","setSession","session","className","role","aria-label","type","data-testid","title","onClick","oi","Object","entries","reduce","classes","value","concat","undefined","filter","join","disabled","ProgressBar","breakDuration","focusDuration","style","height","aria-valuemin","aria-valuemax","aria-valuenow","Math","abs","label","timeRemaining","width","Current","Date","toISOString","substr","nextTick","prevState","max","Pomodoro","useState","setfocusDuration","setbreakDuration","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Audio","play","currentSession","nextSession","nextState","prevStateSession","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.68266b52.chunk.js","sourcesContent":["import React from \"react\";\r\n  \r\nimport classNames from \"../utils/class-names\";\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\nconst Control =(\r\n    {playPause,\r\nisTimerRunning,\r\nsetIsTimerRunning,\r\nsetSession,\r\nsession}\r\n)=> {\r\n    return (\r\n      <div className=\"col\">\r\n        <div\r\n          className=\"btn-group btn-group-lg mb-2\"\r\n          role=\"group\"\r\n          aria-label=\"Timer controls\"\r\n        >\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            data-testid=\"play-pause\"\r\n            title=\"Start or pause timer\"\r\n            onClick={playPause}\r\n          >\r\n            <span\r\n              className={classNames({\r\n                oi: true,\r\n                \"oi-media-play\": !isTimerRunning,\r\n                \"oi-media-pause\": isTimerRunning,\r\n              })}\r\n            />\r\n          </button>\r\n          {/* TODO: Implement stopping the current focus or break session. and disable the stop button when there is no active session */}\r\n          {/* TODO: Disable the stop button when there is no active session */}\r\n          <button\r\n            onClick={() => {\r\n              setIsTimerRunning(null);\r\n              setSession(null);\r\n            }}\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            data-testid=\"stop\"\r\n            title=\"Stop the session\"\r\n            disabled={!session}\r\n          >\r\n            <span className=\"oi oi-media-stop\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Control","/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","import React from \"react\";\r\n\r\nconst ProgressBar= ({session,breakDuration,focusDuration})=> {\r\n    return (\r\n      <div className=\"col\">\r\n        <div className=\"progress\" style={{ height: \"20px\" }}>\r\n          <div\r\n            className=\"progress-bar\"\r\n            role=\"progressbar\"\r\n            aria-valuemin=\"0\"\r\n            aria-valuemax=\"100\"\r\n            aria-valuenow={\r\n              session\r\n                ? (Math.abs(\r\n                    (session.label === \"Focusing\"\r\n                      ? focusDuration\r\n                      : breakDuration) *\r\n                      60 -\r\n                      session.timeRemaining\r\n                  ) /\r\n                    ((session.label === \"Focusing\"\r\n                      ? focusDuration\r\n                      : breakDuration) *\r\n                      60)) *\r\n                  100\r\n                : \"0\"\r\n            } // TODO: Increase aria-valuenow as elapsed time increases\r\n            style={{\r\n              width: session\r\n                ? (Math.abs(\r\n                    (session.label === \"Focusing\"\r\n                      ? focusDuration\r\n                      : breakDuration) *\r\n                      60 -\r\n                      session.timeRemaining\r\n                  ) /\r\n                    ((session.label === \"Focusing\"\r\n                      ? focusDuration\r\n                      : breakDuration) *\r\n                      60)) *\r\n                    100 +\r\n                  \"%\"\r\n                : \"0%\",\r\n            }} // TODO: Increase width % as elapsed time increases\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\nexport default ProgressBar","import React from \"react\";\r\nimport ProgressBar from \"./ProgressBar\";\r\n\r\nconst Current = ({ session, focusDuration, breakDuration }) => {\r\n  if (session) {\r\n    return (\r\n      <>\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\r\n            <h2 data-testid=\"session-title\">\r\n              {session.label === \"Focusing\"\r\n                ? `${session.label} for ${new Date(focusDuration * 60 * 1000)\r\n                    .toISOString()\r\n                    .substr(14, 5)} minutes`\r\n                : `${session.label} for ${new Date(breakDuration * 60 * 1000)\r\n                    .toISOString()\r\n                    .substr(14, 5)} minutes`}\r\n            </h2>\r\n            {/* TODO: Update message below correctly format the time remaining in the current session */}\r\n            <p className=\"lead\" data-testid=\"session-sub-title\">\r\n              {session\r\n                ? new Date(session.timeRemaining * 1000)\r\n                    .toISOString()\r\n                    .substr(14, 5) + \" remaining\"\r\n                : \"\"}\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"row mb-2\">\r\n          <ProgressBar\r\n            session={session}\r\n            breakDuration={breakDuration}\r\n            focusDuration={focusDuration}\r\n          />\r\n        </div>\r\n      </>\r\n    );\r\n  }else {\r\n      return null\r\n  }\r\n};\r\nexport default Current;\r\n","import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport Control from \"./Control\";\nimport Current from \"./Current\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  let [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  let [session, setSession] = useState(null);\n\n  // ToDo: Allow the user to adjust the focus and break duration.\n  let [focusDuration, setfocusDuration] = useState(25);\n  let [breakDuration, setbreakDuration] = useState(5);\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(\n    () => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      return setSession(nextTick);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n\n      return nextState;\n    });\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <div className=\"input-group input-group-lg mb-2\">\n            <span className=\"input-group-text\" data-testid=\"duration-focus\">\n              {/* TODO: Update this text to display the current focus session duration */}\n              Focus Duration:{\" \"}\n              {focusDuration === 5\n                ? `0${focusDuration}:00`\n                : focusDuration + \":00\"}\n            </span>\n            <div className=\"input-group-append\">\n              {/* TODO: Implement decreasing focus duration and disable during a focus or break session */}\n              <button\n                onClick={() =>\n                  focusDuration > 5 && setfocusDuration(focusDuration - 5)\n                }\n                disabled={session}\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                data-testid=\"decrease-focus\"\n              >\n                <span className=\"oi oi-minus\" />\n              </button>\n              {/* TODO: Implement increasing focus duration  and disable during a focus or break session */}\n              <button\n                disabled={session}\n                onClick={() =>\n                  focusDuration < 60 && setfocusDuration(focusDuration + 5)\n                }\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                data-testid=\"increase-focus\"\n              >\n                <span className=\"oi oi-plus\" />\n              </button>\n            </div>\n          </div>\n        </div>\n        <div className=\"col\">\n          <div className=\"float-right\">\n            <div className=\"input-group input-group-lg mb-2\">\n              <span className=\"input-group-text\" data-testid=\"duration-break\">\n                {/* TODO: Update this text to display the current break session duration */}\n                Break Duration:{\" \"}\n                {breakDuration < 10 ? `0${breakDuration}` : breakDuration}:00\n              </span>\n              <div className=\"input-group-append\">\n                {/* TODO: Implement decreasing break duration and disable during a focus or break session*/}\n                <button\n                  disabled={session}\n                  onClick={() =>\n                    breakDuration > 1 && setbreakDuration(breakDuration - 1)\n                  }\n                  type=\"button\"\n                  className=\"btn btn-secondary\"\n                  data-testid=\"decrease-break\"\n                >\n                  <span className=\"oi oi-minus\" />\n                </button>\n                {/* TODO: Implement increasing break duration and disable during a focus or break session*/}\n                <button\n                  disabled={session}\n                  onClick={() =>\n                    breakDuration < 15 && setbreakDuration(breakDuration + 1)\n                  }\n                  type=\"button\"\n                  className=\"btn btn-secondary\"\n                  data-testid=\"increase-break\"\n                >\n                  <span className=\"oi oi-plus\" />\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <Control\n          playPause={playPause}\n          isTimerRunning={isTimerRunning}\n          setIsTimerRunning={setIsTimerRunning}\n          setSession={setSession}\n          session={session}\n        />\n      </div>\n\n      <div>\n        {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\n        <Current\n          session={session}\n          breakDuration={breakDuration}\n          focusDuration={focusDuration}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}